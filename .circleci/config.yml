version: 2.1

jobs:
  server:
    docker:
      - image: circleci/golang:1.14
    working_directory: ~/offen/server
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Download modules
          command: go mod download
      - save_cache:
          paths:
            - /go/pkg/mod
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Run tests
          command: make test

  vault:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/vault
    steps:
      - test_node_app:
          app: vault

  script:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/script
    steps:
      - test_node_app:
          app: script

  auditorium:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/auditorium
    steps:
      - test_node_app:
          app: auditorium

  packages:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/packages
    steps:
      - test_node_app:
          app: packages

  integration:
    docker:
      - image: circleci/node:14
        environment:
          OFFEN_SERVER_PORT: 3000
          OFFEN_DATABASE_DIALECT: postgres
          OFFEN_DATABASE_CONNECTIONSTRING: postgres://circle:test@localhost:5432/circle_test?sslmode=disable
      - image: circleci/postgres:11.2-alpine
        environment:
          - POSTGRES_USER=circle
          - POSTGRES_PASSWORD=test
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build binary
          command: |
            make build
            cp ./bin/offen-linux-amd64 ./offen
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Setup application
          command: |
            touch offen.env
            ./offen setup -email circle@offen.dev -name circle -password secret -populate
      - run:
          name: Serve application
          command:  ./offen
          background: true
      - run:
          name: Wait for server to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 3000 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for server && exit 1
      - run:
          name: Check URLs
          command: |
            curl -sS -X GET localhost:3000 > /dev/null
            curl -sS -X GET localhost:3000/script.js > /dev/null
            curl -sS -X GET localhost:3000/vault/ > /dev/null
            curl -sS -X GET localhost:3000/auditorium/ > /dev/null
            curl -sS -X GET localhost:3000/healthz > /dev/null
            curl -sS -X GET localhost:3000/versionz > /dev/null

  build:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/offen
    environment:
      DOCKER_LOGIN: offen
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - run:
          name: Set build environment
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo 'export OFFEN_GIT_REVISION=$(git rev-parse --short HEAD)' >> $BASH_ENV
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo 'export DOCKER_IMAGE_TAG="stable"' >> $BASH_ENV
              else
                echo 'export DOCKER_IMAGE_TAG="latest"' >> $BASH_ENV
              fi
            else
              echo 'export OFFEN_GIT_REVISION=$CIRCLE_TAG' >> $BASH_ENV
              echo 'export DOCKER_IMAGE_TAG=$CIRCLE_TAG' >> $BASH_ENV
            fi
      - run:
          name: Build application Docker image and binary
          command: |
            TARGETS=linux/amd64,windows/amd64 make build
            # Darwin builds cannot be statically linked right now
            # so we override the default LDFLAGS value
            TARGETS=darwin/amd64 LDFLAGS='' make build
            make build-docker
      - run:
          name: Download and import signing key
          command: |
            aws s3 cp s3://offen-secrets/signing-key.asc /tmp
            gpg --import /tmp/signing-key.asc
      - run:
          name: Package tarball
          working_directory: ~/offen/bin
          command: |
            for artifact in $(ls); do
              gpg --armor --detach-sign $artifact
            done

            md5sum * > checksums.txt

            cp ~/offen/{LICENSE,NOTICE,README.md} .

            mkdir -p /tmp/artifacts
            tar -czvf /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz $(ls -A)
      - run:
          name: Upload to S3
          command: aws s3 cp /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz s3://offen/binaries/offen-$DOCKER_IMAGE_TAG.tar.gz
      - docker/install-docker-credential-helper
      - docker/configure-docker-credentials-store
      - run:
          name: Push offen/offen to Docker Hub
          command: |
            echo "$DOCKER_ACCESSTOKEN" | docker login --username $DOCKER_LOGIN --password-stdin
            docker push offen/offen:$DOCKER_IMAGE_TAG
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  test_build_push:
    jobs:
      - server: &all_tags_filter
          filters:
            tags:
              only: /.*/
      - vault:
          <<: *all_tags_filter
      - script:
          <<: *all_tags_filter
      - auditorium:
          <<: *all_tags_filter
      - packages:
          <<: *all_tags_filter
      - integration:
          <<: *all_tags_filter
      - build:
          requires:
            - server
            - vault
            - script
            - auditorium
            - packages
            - integration
          filters:
            tags:
              only: /^v.*/ # tagged release from master branch
            branches:
              only:
                - development
                - master

commands:
  test_node_app:
    description: Run unit tests for a Node.js based subapp
    parameters:
      app:
        type: string
      checkout:
        type: string
        default: ~/offen
    steps:
      - checkout:
          path: << parameters.checkout >>
      - restore_cache:
          key: offen-<< parameters.app >>-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - ~/offen/auditorium/node_modules
          key: offen-<< parameters.app >>-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  docker: circleci/docker@1.0.1
